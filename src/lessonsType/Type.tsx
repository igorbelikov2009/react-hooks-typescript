const Type = () => {
  /* 1. Тип в Javascript - это набор значений
        В Javascript 8 типов:
         - undefined
         - null
         - boolean
         - number(числа: целые и дробные)
         - BigInt(числа большие)
         - string
         - symbol
         - object
         - Все типы в Javascript динамические. Мы можем использовать их во время
            кода и видоизменять
   */

  /* 2. Тип в Typescript
          - Typescript добавляет слой статических типов. То есть, если мы
            назначили тип, то, в рамках нашего приложения, этот тип не меняется. 
          - Типы существуют при компиляции или проверке исходного кода. 
          - Каждое место хранения данных имеет статический тип. Что такое место
            хранения:
            - переменная
            - ключ в каком нибудь объекте
            - параметр в функции
               и т.д. 
          - Тип определяет возможные дмнамические значения
    */

  /* 3. Вывод типа
          - В большинстве случаев, нам аннотация не нужна. Тип определяет сам
            Typescript.
          - Если Typescript определил тип, то его изменение так же невозможно.
          - Нет необходимсти везде писать аннотацию.
    */

  /* 4. x: Date есть такoй тип: Date */
  let x: Date = new Date();

  /* 5.  Аннотация бывает сложносоставной */
  type MyScore = number | string; // union
  let score: MyScore = 11;
  score = "acd";
  let csore2: MyScore = "ggg";

  /* 6. Псевдоним типа (алиас) */
  // При частом использовании составного типа, ему задают псевдоним

  /* 7. Когда аннотация нужна  */
  //  7.1 когда функция возвращает тип "any" и мы хотим уточнить значение
  let y: number = JSON.parse("6");
  let str: string = JSON.parse("slngbjngfkbj");
  //  7.2 когда объявление переменной и присвоение ей значения происходят
  //    на разных строчках
  let isOdd: boolean;
  if (y % 2 === 0) {
    isOdd = false;
  } else {
    isOdd = true;
  }

  /*  */
  console.log(x, score, csore2, y, str, isOdd);
  return <></>;
};
export default Type;
